[{"content":"","date":"17 October 2022","permalink":"/","section":"","summary":"","title":""},{"content":"","date":"17 October 2022","permalink":"/posts/my-first-post/","section":"Posts","summary":"","title":"My First Posttest"},{"content":"","date":"17 October 2022","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"7 February 2018","permalink":"/tags/ansible/","section":"Tags","summary":"","title":"ansible"},{"content":"","date":"7 February 2018","permalink":"/categories/ansible/","section":"Categories","summary":"","title":"ansible"},{"content":"With a fresh new year comes a fresh new set of VPS hosts, and as a resolution i\u0026rsquo;m planning to fully deploy these through ansible, along with migrating a lot of my existing machines to ansible as well.\nNow, as we all know, it\u0026rsquo;s generally considered a bad idea to store plaintext passwords for the world to see in a git repository, which is why ansible-vault exists. However, for ansible vault to work, we need to provide a password on the command line, and while obviously i could use the same password for all the vault files, i considered it a challenge to properly automate this and use a randomly generated password for each of my hosts and groups. For this, we\u0026rsquo;re going to use lastpass-cli . If you\u0026rsquo;re not aware of this tool, it is amazing and i use it to store literally everything in there.\nWhat i\u0026rsquo;ve done is store all my credentials sites in the following format:\nansible.vault.{{environment}}.type.{{varname}}: For example, a production host called vps01.transip.vxsan.com would have a lastpass entry called ansible.vault.production.host.vps01.transip.vxsan.com, while a group of webservers in development would have a vault entry called ansible.vault.development.group.webservers. Note that the entries are all empty except for the password and the name, as can be seen below:\nAlso note that you can create these entries through the lastpass-cli as well, so you could very easily make this an automated process through rake or various other deployment tools, even going so far as to generate a random vault password every time you add a new host or a new group.\nMy directory structure for ansible playbooks is as follows:\n- playbook - extensions (contains various scripts) - host_vars - host1.tld - app1 - app2 - appn - host2.tld - hostn.tld - group_vars - group1 - app1 - app2 - appn - group2 - plays (contains all playbooks) - roles (contains all roles) As you can see, because of the way host_vars and group_vars are structured, this setup allows for simplified automation when it comes to generating data either per host or per group.\nNow onto how we are using this:\nTo automate the ansible process we are using rake. An excerpt from my ansible rakefile using lastpass has been shown below:\nnamespace :ansible do def checklogin system(\u0026#34;lpass status -q\u0026#34;) end ansible_cli = \u0026#34;ansible-playbook \u0026#34; task :login, [:username] do |t, args| user = \u0026#34;#{args.username}\u0026#34; user.empty? and abort(\u0026#34;user not defined\u0026#34;) checklogin or system(\u0026#34;lpass login #{user}\u0026#34;) end task :run, :env, :play, :tag do |t, args| env = \u0026#34;#{args.env}\u0026#34; env.empty? and abort(\u0026#34;environment not defined\u0026#34;) play = \u0026#34;#{args.play}\u0026#34; play.empty? and abort(\u0026#34;play not defined\u0026#34;) tag = \u0026#34;#{args.tag}\u0026#34; checklogin or abort(\u0026#34;user not logged in\u0026#34;) system(\u0026#34;lpass sync\u0026#34;) Dir.foreach(\u0026#39;./group_vars\u0026#39;) do |item| next if item == \u0026#39;.\u0026#39; or item == \u0026#39;..\u0026#39; pwid = \u0026#34;vault.#{env}.#{item}\u0026#34; password=`lpass show -F #{pwid} --password 2\u0026gt; /dev/null` password.empty? or ansible_cli = ansible_cli + \u0026#34; --vault-id ../vaultid.#{item}\u0026#34; password.empty? or File.write(\u0026#34;vaultid.#{item}\u0026#34;, \u0026#34;#{password}\u0026#34;) password.empty? or File.chmod(0600,\u0026#34;vaultid.#{item}\u0026#34;) end Dir.foreach(\u0026#39;./host_vars\u0026#39;) do |item| next if item == \u0026#39;.\u0026#39; or item == \u0026#39;..\u0026#39; pwid = \u0026#34;vault.#{env}.#{item}\u0026#34; password=`lpass show -F #{pwid} --password 2\u0026gt; /dev/null` password.empty? or ansible_cli = ansible_cli + \u0026#34; --vault-id ../vaultid.#{item}\u0026#34; password.empty? or File.write(\u0026#34;vaultid.#{item}\u0026#34;, \u0026#34;#{password}\u0026#34;) password.empty? or File.chmod(0600,\u0026#34;vaultid.#{item}\u0026#34;) end tag.empty? or ansible_cli = ansible_cli + \u0026#34; --tag #{tag}\u0026#34; ansible_cli = ansible_cli + \u0026#34; -i ../#{env}.ini #{play} \u0026#34; Dir.chdir(\u0026#39;plays\u0026#39;) system(\u0026#34;#{ansible_cli}\u0026#34;) Dir.glob(\u0026#39;../vaultid.*\u0026#39;).each { |item| File.delete(\u0026#34;#{item}\u0026#34;) } end end Note that this temporarily writes the passwords to the cwd so in a shared environment so this could be considered insecure, even though permissions are set to 0600. However, as i am the only user on my VPS for my current setup it works well.\nAt the start, rake will check the user login status and request a login if the user isn\u0026rsquo;t already. Afterwards, for every host_vars and group_vars it will try to look up the corresponding password item from lastpass, write the password to a temporary file and use the file on the ansible run as a parameter. After the ansible run completes, the file will be removed again.\nObviously, this example is not limited to ansible (or Rake for that matter), and it will allow you to automate credential usage in your personal systems, lab environments and whatever you can think of. Personally, i already don\u0026rsquo;t know the majority of the passwords i use in my browser, and using lastpass on the CLI as well will reduce the amount of password reuse to a minimum there as well.\n","date":"7 February 2018","permalink":"/posts/ansible-vault-passwords-done-easy-with-lastpass/","section":"Posts","summary":"With a fresh new year comes a fresh new set of VPS hosts, and as a resolution i\u0026rsquo;m planning to fully deploy these through ansible, along with migrating a lot of my existing machines to ansible as well.","title":"Ansible-Vault password management made easy with Lastpass-CLI and Rake"},{"content":"","date":"7 February 2018","permalink":"/tags/blogposts/","section":"Tags","summary":"","title":"blogposts"},{"content":"","date":"7 February 2018","permalink":"/categories/blogposts/","section":"Categories","summary":"","title":"blogposts"},{"content":"","date":"7 February 2018","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"7 February 2018","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"}]